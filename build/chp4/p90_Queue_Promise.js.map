{"version":3,"sources":["../../chp4/p90_Queue_Promise.js"],"names":[],"mappings":";;;;;;;;AAIA;;;;;;;;IAEM,O;AACF,uBAAc;AAAA;;AACV,aAAK,KAAL,GAAa,EAAb;AACA,aAAK,SAAL,GAAiB,IAAjB;AAEH;;;;6BAEI,gB,EAAkB,Y,EAAc,e,EAAiB;AAClD,gBAAI,UAAU,EAAd;AACA,gBAAI,OAAO,gBAAP,KAA4B,UAAhC,EAA4C;AACxC,wBAAQ,OAAR,GAAkB,gBAAlB;AACH;AACD,gBAAI,OAAQ,YAAR,KAAyB,UAA7B,EAAyC;AACrC,wBAAQ,KAAR,GAAgB,YAAhB;AACH;AACD,gBAAI,OAAO,eAAP,KAA2B,UAA/B,EAA2C;AACvC,wBAAQ,QAAR,GAAmB,eAAnB;AACH;AACD,iBAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB;AACA,mBAAO,IAAP;AACH;;;;;;IAGC,K;AACF,qBAAc;AAAA;;AACV,aAAK,OAAL,GAAe,IAAI,OAAJ,EAAf;AACH;;;;2CAEkB;AACf,gBAAI,OAAO,IAAX;AACA,mBAAO,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AAC1B,oBAAI,KAAJ,EAAW;AACP,yBAAK,MAAL,CAAY,KAAZ;AACH,iBAFD,MAEO,IAAI,UAAU,MAAV,GAAmB,CAAvB,EAA0B;AAC7B,yBAAK,OAAL,CAAa,GAAG,KAAH,CAAS,IAAT,CAAc,SAAd,EAAyB,CAAzB,CAAb;AACH,iBAFM,MAEA;AACH,yBAAK,OAAL,CAAa,KAAb;AACH;AACJ,aARD;AASH;;;+BAEM,K,EAAO;AACV,gBAAI,UAAU,KAAK,OAAnB;AACH;;;gCAEO,K,EAAO;AACX,gBAAI,UAAU,KAAK,OAAnB;AACA,gBAAI,gBAAJ;;AAEA,mBAAO,UAAU,QAAQ,KAAR,CAAc,KAAd,EAAjB,EAAwC;AACpC,oBAAI,WAAW,QAAQ,OAAvB,EAAgC;AAC5B,wBAAI,MAAM,QAAQ,OAAR,CAAgB,KAAhB,CAAV;AACA,wBAAI,OAAO,IAAI,SAAf,EAA0B;AACtB,4BAAI,KAAJ,GAAY,QAAQ,KAApB;AACA,6BAAK,OAAL,GAAe,GAAf;AACA;AACH;AACJ;AACJ;;;;;AAKJ;;;;;;;;;AAML,IAAI,WAAW,SAAX,QAAW,CAAS,IAAT,EAAe,QAAf,EAAyB;AACpC,QAAI,QAAQ,IAAI,KAAJ,EAAZ;AACA,iBAAG,QAAH,CAAY,IAAZ,EAAkB,QAAlB,EAA4B,MAAM,gBAAN,EAA5B,E;AACA,WAAO,MAAM,OAAb;AACH,CAJD;;AAMA,IAAI,WAAW,SAAS,YAAT,EAAuB,MAAvB,CAAf;;AAEA,SAAS,IAAT,CAAc,UAAC,IAAD,EAAU;AACpB,YAAQ,GAAR,CAAY,KAAK,IAAL,EAAZ;AACA,WAAO,SAAS,KAAK,IAAL,EAAT,EAAsB,MAAtB,CAAP;AACH,CAHD,EAGG,IAHH,CAGQ,UAAC,IAAD,EAAU;AACf,YAAQ,GAAR,CAAY,IAAZ;AACF,CALD","file":"p90_Queue_Promise.js","sourcesContent":["/**\n * Created by fulvaz on 16/6/25.\n * Promise then链式调用, 另外去除了时间, 直接让Promise与Defer交互\n */\nimport fs from 'fs'\n\nclass Promise {\n    constructor() {\n        this.queue = [];\n        this.isPromise = true;\n        \n    }\n\n    then(fulfilledHandler, errorHandler, progressHandler) {\n        let handler = {};\n        if (typeof fulfilledHandler === 'function') {\n            handler.fulfill = fulfilledHandler; \n        }\n        if (typeof  errorHandler === 'function') {\n            handler.error = errorHandler;\n        }\n        if (typeof progressHandler === 'function') {\n            handler.progress = progressHandler;\n        }\n        this.queue.push(handler);\n        return this;\n    }\n}\n\nclass Defer {\n    constructor() {\n        this.promise = new Promise();\n    }\n\n    makeNodeResolver() {\n        let self = this;\n        return function(error, value) {\n            if (error) {\n                self.reject(error);\n            } else if (arguments.length > 2) {\n                self.resolve([].slice.call(arguments, 1));\n            } else {\n                self.resolve(value);\n            }\n        }\n    }\n\n    reject(error) {\n        let promise = this.promise;\n    }\n\n    resolve(value) {\n        let promise = this.promise;\n        let handler;\n        // 取出一个handler\n        while (handler = promise.queue.shift()) {\n            if (handler && handler.fulfill) {\n                let ret = handler.fulfill(value);\n                if (ret && ret.isPromise) {\n                    ret.queue = promise.queue;\n                    this.promise = ret;\n                    return\n                }\n            }\n        }\n\n        // 运行那个handler\n\n        // 将当前promise的queue复制给下一个promise  外面调用必定返回promise\n    }\n\n   \n}\n\n// usage\nlet readFile = function(file, encoding) {\n    let defer = new Defer();\n    fs.readFile(file, encoding, defer.makeNodeResolver()); // 应该设置为静态方法\n    return defer.promise;\n};\n\nlet promise1 = readFile('./path.txt', 'utf8');\n\npromise1.then((data) => {\n    console.log(data.trim());\n    return readFile(data.trim(), 'utf8');\n}).then((data) => {\n   console.log(data);\n});\n"]}