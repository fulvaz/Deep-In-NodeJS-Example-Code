{"version":3,"sources":["../../chp4/p159_simple_http_server.js"],"names":[],"mappings":";;AAAA;;;;;;AAEA,eAAK,YAAL,CAAkB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC5B,YAAQ,GAAR,CAAY,IAAI,MAAhB;AACA,QAAI,SAAJ,CAAc,GAAd,EAAmB,EAAC,gBAAgB,YAAjB,EAAnB;AACA,QAAI,GAAJ,CAAQ,gBAAR;;AAEA,QAAI,UAAU,EAAd;AACA,QAAI,EAAJ,CAAO,MAAP,EAAe,UAAC,KAAD,EAAW;AACtB,gBAAQ,IAAR,CAAa,KAAb;AACH,KAFD;;AAIA,QAAI,EAAJ,CAAO,KAAP,EAAc,YAAM;AAChB,YAAI,SAAS,OAAO,MAAP,CAAc,OAAd,CAAb;AACA,YAAI,GAAJ,CAAQ,KAAR;AACH,KAHD;AAIH,CAdD,EAcG,MAdH,CAcU,IAdV,EAcgB,WAdhB;;AAgBA,QAAQ,GAAR,CAAY,gBAAZ","file":"p159_simple_http_server.js","sourcesContent":["import http from 'http'\n\nhttp.createServer((req, res) => {\n    console.log(req.method);\n    res.writeHead(200, {'Content-Type': 'text/plain'});\n    res.end('hello world \\n');\n\n    let buffers = [];\n    req.on('data', (trunk) => {\n        buffers.push(trunk);\n    });\n\n    req.on('end', () => {\n        let buffer = Buffer.concat(buffers);\n        res.end('hi~');\n    });\n}).listen(1337, '127.0.0.1');\n\nconsole.log('Server running');\n\n// var cluster = require('cluster');\n// var http = require('http');\n// var numCPUs = require('os').cpus().length;\n//\n// if (cluster.isMaster) {\n//     // Fork workers.\n//     for (var i = 0; i < 5; i++) {\n//         cluster.fork();\n//     }\n//\n//     cluster.on('exit', function(worker, code, signal) {\n//         console.log('worker ' + worker.process.pid + ' died');\n//     });\n// } else {\n//     // Workers can share any TCP connection\n//     // In this case its a HTTP server\n//     http.createServer(function(req, res) {\n//\n//         var buffer = new Buffer(\"hello world\");\n//         var length = Buffer.byteLength(\"hello world\");\n//         res.statusCode = 200;\n//         res.setHeader('Content-Length', length);\n//         res.end(buffer);\n//\n//         /*\n//          util.getValue(function(reply){\n//          var buffer = new Buffer(reply);\n//          var length = Buffer.byteLength(reply);\n//          res.statusCode = 200;\n//          res.setHeader('Content-Length', length);\n//          res.end(buffer);\n//          });*/\n//\n//     }).listen(1337);\n// }\n\n"]}